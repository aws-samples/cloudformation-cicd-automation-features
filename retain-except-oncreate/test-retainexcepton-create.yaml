AWSTemplateFormatVersion: '2010-09-09'

Description: This CloudFormation template is used to cover the example of RetainExceptOnCreate Deletion Policy.

Parameters:

  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'

  InstanceType:
    Description: WebServer EC2 instance type
    Type: String
    Default: t3.small
    AllowedValues: [t3.micro, t3.small, t3.medium]
    ConstraintDescription: must be a valid EC2 instance type. 
  
  VPCId: 
    Description: VPC ID for Ec2 Instance and security group.
    Type: String
  
  Ec2Subnet: 
    Description: Subnet in which the instance would be created.
    Type: String

  ALBSubnetSubnet1:   #To be removed initially
    Description: List of subnets for ALB
    Type: String

  ALBSubnetSubnet2: #To be removed initially
    Description: List of subnets for ALB
    Type: String

  IngressIp:
    Description: The IP address range that can access the Ec2 instance on port 80.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  EgressIp:
    Description: The IP address range that the Ec2 instance send traffic to on port 443.
    Type: String
    MinLength: 9
    MaxLength: 18
    Default: 0.0.0.0/0
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:

  EC2Instance:
    Type: AWS::EC2::Instance
    DeletionPolicy: RetainExceptOnCreate # Change the deletion policy here to Retain to test how this would work with the Retain Deletion policy.
    UpdateReplacePolicy: Delete
    Properties: 
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds: 
        - !Ref 'InstanceSecurityGroups'
      ImageId:  !Ref LatestAmiId
      SubnetId: !Ref Ec2Subnet 

  InstanceSecurityGroups:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: RetainExceptOnCreate # Change the deletion policy here to Retain to test how this would work with the Retain Deletion policy.
    UpdateReplacePolicy: Retain
    Properties:
      GroupDescription: Allows incoming traffic on port 80 and outgoing traffic on port 443. 
      VpcId: !Ref VPCId  # Specify the VPC ID for the security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref 'IngressIp'
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443        
          CidrIp: !Ref 'EgressIp'

### adding ALB to the template ####

#To be removed initially

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    DeletionPolicy: RetainExceptOnCreate  # Change the deletion policy here to Retain to test how this would work with the Retain Deletion policy.
    UpdateReplacePolicy: Delete
    Properties:
      Subnets:
        - !Ref ALBSubnetSubnet1
        - !Ref ALBSubnetSubnet2
      SecurityGroups:
        - !GetAtt InstanceSecurityGroups.GroupId
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: access_logs.s3.enabled
          Value: true
      Tags:
        - Key: Name
          Value: MyLoadBalancer
  
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DeletionPolicy: RetainExceptOnCreate # Change the deletion policy here to Retain to test how this would work with the Retain Deletion policy.
    UpdateReplacePolicy: Delete
    Properties:
      Name: my-target-group
      Port: 80
      Protocol: HTP
      VpcId: !Ref VPCId
      TargetType: instance
      Targets:
        - Id: !Ref EC2Instance

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    UpdateReplacePolicy: Delete
    DeletionPolicy: RetainExceptOnCreate # Change the deletion policy here to Retain to test how this would work with the Retain Deletion policy.
    Properties:
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          ForwardConfig: 
            TargetGroups: 
              - TargetGroupArn: !Ref MyTargetGroup